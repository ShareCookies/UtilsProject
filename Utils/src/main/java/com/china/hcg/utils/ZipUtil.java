//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package com.china.hcg.utils;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

import com.china.hcg.java.set.List;
import org.apache.commons.lang3.StringUtils;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

public class ZipUtil {
    public ZipUtil() {
    }

    public static String gzip(String primStr) {
        if (primStr != null && primStr.length() != 0) {
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            GZIPOutputStream gzip = null;

            try {
                gzip = new GZIPOutputStream(out);
                gzip.write(primStr.getBytes());
            } catch (IOException var12) {
                var12.printStackTrace();
            } finally {
                if (gzip != null) {
                    try {
                        gzip.close();
                    } catch (IOException var11) {
                        var11.printStackTrace();
                    }
                }

            }

            return (new BASE64Encoder()).encode(out.toByteArray());
        } else {
            return primStr;
        }
    }

    public static String gunzip(String compressedStr) {
        if (compressedStr == null) {
            return null;
        } else {
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            ByteArrayInputStream in = null;
            GZIPInputStream ginzip = null;
            byte[] compressed = null;
            String decompressed = null;

            try {
                compressed = (new BASE64Decoder()).decodeBuffer(compressedStr);
                in = new ByteArrayInputStream(compressed);
                ginzip = new GZIPInputStream(in);
                byte[] buffer = new byte[1024];
                boolean var7 = true;

                int offset;
                while((offset = ginzip.read(buffer)) != -1) {
                    out.write(buffer, 0, offset);
                }

                decompressed = new String(out.toByteArray(), "gb2312");
            } catch (IOException var24) {
                var24.printStackTrace();
            } finally {
                if (ginzip != null) {
                    try {
                        ginzip.close();
                    } catch (IOException var23) {
                    }
                }

                if (in != null) {
                    try {
                        in.close();
                    } catch (IOException var22) {
                    }
                }

                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException var21) {
                    }
                }

            }

            return decompressed;
        }
    }

    public static final String zip(String str) {
        if (str == null) {
            return null;
        } else {
            ByteArrayOutputStream out = null;
            ZipOutputStream zout = null;
            String compressedStr = null;

            try {
                out = new ByteArrayOutputStream();
                zout = new ZipOutputStream(out);
                zout.putNextEntry(new ZipEntry("0"));
                zout.write(str.getBytes());
                zout.closeEntry();
                byte[] compressed = out.toByteArray();
                compressedStr = (new BASE64Encoder()).encodeBuffer(compressed);
            } catch (IOException var18) {
                Object var1 = null;
            } finally {
                if (zout != null) {
                    try {
                        zout.close();
                    } catch (IOException var17) {
                    }
                }

                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException var16) {
                    }
                }

            }

            return compressedStr;
        }
    }

    public static final String unzip(String compressedStr) {
        if (compressedStr == null) {
            return null;
        } else {
            ByteArrayOutputStream out = null;
            ByteArrayInputStream in = null;
            ZipInputStream zin = null;
            String decompressed = null;

            try {
                byte[] compressed = (new BASE64Decoder()).decodeBuffer(compressedStr);
                out = new ByteArrayOutputStream();
                in = new ByteArrayInputStream(compressed);
                zin = new ZipInputStream(in);
                zin.getNextEntry();
                byte[] buffer = new byte[1024];
                boolean var7 = true;

                int offset;
                while((offset = zin.read(buffer)) != -1) {
                    out.write(buffer, 0, offset);
                }

                decompressed = new String(out.toByteArray(), "gb2312");
            } catch (IOException var24) {
                decompressed = null;
            } finally {
                if (zin != null) {
                    try {
                        zin.close();
                    } catch (IOException var23) {
                    }
                }

                if (in != null) {
                    try {
                        in.close();
                    } catch (IOException var22) {
                    }
                }

                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException var21) {
                    }
                }

            }

            return decompressed;
        }
    }

    public static void main(String[] args) throws UnsupportedEncodingException {
//        String DetailRecords = "商户号|交易类型|订单编号|交易时间|交易金额|商户账号|商户动账金额|客户账号|账户类型|商户回佣手续费|商户分期手续费|会计日期|主机流水号|9014流水号|原订单号^^103883070210088|Sale|18092716492122988318|20180927165428|0.50|30702501040005488|0.50|6228480898492269979|401|0.00|0.00|20180927|461602083|9RECEP01164952172053|^^103883070210088|Sale|18092716545705589284|20180927170017|0.10|30702501040005488|0.10|6228480898492269979|401|0.00|0.00|20180927|464913123|9RECEP01165437896710|^^103883070210088|Sale|18092717011916045316|20180927170606|0.20|30702501040005488|0.20|6228480898492269979|401|0.00|0.00|20180927|468079803|9RECEP01170032221461|^^103883070210088|Sale|18092717025810977622|20180927170733|0.30|30702501040005488|0.30|6228480898492269979|401|0.00|0.00|20180927|468850265|9RECEP01170158015637|^^103883070210088|Sale|18092717173883664167|20180927172250|0.10|30702501040005488|0.10|6228480898492269979|401|0.00|0.00|20180927|476494963|9RECEP01171955369921|";
//        String compress = gzip(DetailRecords);
//        System.out.println("zip compress:" + compress);
////        System.out.println("zip decompress:" + gunzip("H4sIAAAAAAAEADWOPUsDQRCG/5G8s7O3N1tLeiF9wMLOnzB/R4KFSgovkE1QixwmZyB+3CmpIliLXcTKveWumOGd552v1VMYz5a6CC/v9/vtRovL24vJviPryfwricVP8a2r2FpX0WpFcVNXid5tOlpXYZxWtHb4eC3WzfZ3+pzKaVPuujJ8zsvHutxpcwh/D4fqOo56kO3k21X7wWw5GhFYhJHDECCiw9PzMyWBN0IuhjfETJknNegxsxUlHAGaJjMQLIDMSs+dYWQG4gHDubWcQy1Ik5lSv06tdc6DnagfDo4HJ6B42GcEZ8iy/gPSFXokOwEAAA=="));
////        System.out.println("zip decompress2:" + gunzip("H4sIAAAAAAAEAJVOPUsDQRD9RzKzO7u3W+tZqr8gYGGRRuxUmL8jwUIlhRfIJqhFDpMzED/ulFQRrMUuIZVz5zUBAzrVvPfmvXnDh9DqDrgfnl5vZ5MxJ+fXZ+1ZzYzavY9q6X8lnzyU0zwTqVySqzyr2JtxzeZZaFURpRzenpNRMVl0HivYKdJpDcN7L73P0ykX87C8m2eXYvWAVK8vF2WD7qDRQNDOgS8HFTk+PmieNA+P9k9ZAXog8OBNpDUiAFj0hKsCMWwow+C1RSMCablzBn/ond2teJsJBAoBUHsRWEeERC4iJh9vxnuAEmeVM2Sdp7XP/1IY5R8qtOKJUEW0KmjGX9riv6qiNtLTaglVa99+A4r1M5T0AQAA"));
//        String decompress = gunzip("H4sIAAAAAAAEAK2QO0sDQRDHv4+FzGtnd2tNJYhgoxYBCzs/wn4dCRYqKbxALkEtEkxiID4SJZWCtdhFrNy7nHoWYgpnm5n/vH47vau01uyEdnpzf/44Gobk8PSg/lgo/XrrOXfar8lL6MXS8SCmMic5GQ9y9WxYqONBWstHZOn04TbpT0Zvjes8bEy60yJMn1rdy3F3Giaz9P1iNjiOrR5QCvfuKCNodqpVBHYOGQGASGzY3N3fC+urO1sUFVRnyZAQOHBGyBoOBMSgBGiRDQVYBgyxH1GUFOZm57LGyqXcVK0PEiWI73NCMACeldkFXausVDYAs6EAauM4CIvBESEadgwkWIYDxj/gjJ/DkUGJcPITbhslbvdCWqIDiyQKwrQgnZh4NCRla6FMJ1ScDoCzckCnCgb1S8U5HFqV/HJltm8ijj1sHTrC34hKNByXoUMvylKmiQf8FxrDHkz8MXsfPgB2Dzjo8wIAAA==");
        String decompress = gunzip("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");
        System.err.println(decompress);
    }


}
