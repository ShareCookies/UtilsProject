<?xml version="1.0" encoding="UTF-8"?>
<configuration>
<!--
    每个logger都关联到logger上下文，默认上下文名称为“default”。
    但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。
    一旦设置，不能修改。可以通过%contextName来打印日志上下文名称，
    一般来说我们不用这个属性，可有可无
-->
	<!--<contextName>nacos-service-boot</contextName>-->
<!--
	<property>
    	配置集中管理的属性
    	直接使用该属性的value value格式":${name}
-->
<!--
日志格式化输出：
    %-5level 级别从左显示5个字符宽度 
    %d{yyyy-MM-dd HH:mm:ss.SSS} %d表示日期
    %c类的完整名称（%logger？）
    %M为method
    %L为行号
    %thread线程名称
    %m或者%msg 日志消息
    %n换行
-->
<!--%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
<property name="pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %c [%thread] %-5level %msg%n"/>
<!--
Appender: 设置日志信息的去向,常用的有以下几个
	ch.qos.logback.core.ConsoleAppender (控制台)
	ch.qos.logback.core.rolling.RollingFileAppender (文件大小到达指定尺寸的时候产生一个新文件)
	ch.qos.logback.core.FileAppender (文件)
-->
<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
	<!--控制台输出流对象 默认 System.out 改为 System.err 就变为了红色字体-->
	<target>System.err</target>
	<!--日志格式配置-指定日志的输出格式-->
	<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
		<pattern>${pattern}</pattern>
	</encoder>
	<!--日志过滤规则-->
	<filter class="ch.qos.logback.classic.filter.LevelFilter">
		<level>INFO</level>
		<!--等于当前级别放行-->
		<!--超过当前级别放行-->
		<onMath>ACCEPT</onMath>
		<!--小于当前级别拦截-->
		<onMismatch>DENY</onMismatch>
		<!-- 匹配时的操作：接收（记录） -->
		<!--<onMatch>ACCEPT</onMatch>-->
	</filter>
</appender>
<!-- 不同的业务逻辑日志打印到指定文件夹-->
<!-- private static final Logger logTest= LoggerFactory.getLogger("test");-->
<logger name="test" additivity="false" level="INFO">
	<appender name="baitiaoUserAppender" class="ch.qos.logback.core.FileAppender">
		<file>${log_dir}/logbackTest.log</file>
		<append>true</append>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<encoder charset="UTF-8">
			<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] %level [%thread] %file:%line - %msg%n</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>
</logger>
<!--

<loger>-用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
	<loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性
	name:
		用来指定受此logger约束的某一个包或者具体的某一个类。
	level:
		用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
		如果未设置此属性，那么当前logger将会继承上级的级别。
	additivity:
		是否向上级loger传递打印信息。默认是true。
	<logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger
-->
<!--
<root>
	也是<logger>元素，但是它是根logger。默认debug
	level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
	<root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个 logger。
-->
<root level="ALL">
	<!--指定某个具体的Appender实现-->
	<appender-ref ref="console"/>
</root>


</configuration>