https://blog.csdn.net/woxueliuyun/article/details/43267365

HttpURLConnection
	A URLConnection with support for HTTP-specific features.
	支持http的一个url连接
	Each HttpURLConnection instance is used to make a single request
	but the underlying network connection to the HTTP server may be transparently shared by other instances. 
	通常一个httpurl连接用来发起一个请求，但其底层的连接可能会被共享 所以用完后httpurl建议调用其close方法
		？
			
			任何网络连接都需要经过socket才能连接，HttpURLConnection不需要设置socket，所以，HttpURLConnection并不是底层的连接，而是在底层连接上的一个请求。
		
		？
			虽然底层的网络连接可以被多个HttpURLConnection实例共享，但每一个HttpURLConnection实例只能发送一个请求。
			请求结束之后，应该调用HttpURLConnection实例的InputStream或OutputStream的close()方法以释放请求的网络资源，不过这种方式对于持久化连接没用。
			对于持久化连接，得用disconnect()方法关闭底层连接的socket。
			
HttpURLConnection的使用：
    1. 生成URL类对象
        new URL(url)
    2. 生成HttpURLConnection
        //HttpURLConneciton是一个抽象类，通常通过URL.openConnection()方法创建具体的实例。
        HttpURLConnection urlCon = (HttpURLConnection)url.openConnection();
        //？强转
        附：
            超时设置，防止 网络异常的情况下，可能会导致程序僵死而不继续往下执行
            urlCon.setConnectTimeout(30000);
    3. 设置HttpURLConnection参数
        // 设定请求的方法为"POST"，默认是GET
        httpUrlConnection.setRequestMethod("POST");

        // 设置是否向httpUrlConnection输出，默认情况下是false;
        // 当 post请求时 参数要放在 http正文内时，需要设为true
        httpUrlConnection.setDoOutput(true);

        // 设置是否从httpUrlConnection读入，默认情况下是true;
        httpUrlConnection.setDoInput(true);

        // Post 请求不能使用缓存  ？
        httpUrlConnection.setUseCaches(false);

        //设置请求头
            // 传送的内容类型是可序列化的java对象时如果不设此项,在传送序列化对象时,当WEB服务默认的不是这种类型时可能抛java.io.EOFException)
        httpUrlConnection.setRequestProperty("Content-type", "application/x-java-serialized-object");

        // 连接，从上述url.openConnection()至此的配置必须要在connect之前完成，
        httpUrlConnection.connect();

    4. 建立连接
        httpUrlConnection.connect();


    HttpURLConnection发送请求?
        建立实际连接之后，就是发送请求，把请求参数传到服务器，需要使用outputStream把请求参数传给服务器：
            //此处getOutputStream会隐含的进行connect(即：如同调用上面的connect()方法
            OutputStream outStrm = httpUrlConnection.getOutputStream();
        例：对象输出流对象	// getOutputStream的另一个实现类吧！
            // 对象输出流对象，实现输出可序列化的对象。
            ObjectOutputStream objOutputStrm = new ObjectOutputStream(outStrm);

            // 向对象输出流写出数据，这些数据将存到内存缓冲区中
            objOutputStrm.writeObject(new String("我是测试数据"));

            // 刷新对象输出流，将任何字节都写入潜在的流中（些处为ObjectOutputStream）
            objOutputStm.flush();

            // 关闭流对象。此时，不能再向对象输出流写入任何数据，先前写入的数据存在于内存缓冲区中,
            // 在调用下边的getInputStream()函数时才把准备好的http请求正式发送到服务器
            objOutputStm.close();


    5. 获取响应
        httpUrIConetion.getlnputStream();
        ...getContent
        ...getHeaderField
        ...
HttpConnection 原理？