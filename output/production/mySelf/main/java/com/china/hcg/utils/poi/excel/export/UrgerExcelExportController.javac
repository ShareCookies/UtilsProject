package com.rongji.egov.doc.web.controller.excel.export;

import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.ss.util.CellRangeAddress;
import org.springframework.web.bind.annotation.GetMapping;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.List;

/**
 * @autor hecaigui
 * @date 2021-7-2
 * @description
 */
public class UrgerExcelExportController {
    /**
     * @description
     * @author hecaigui
     * @date 2020-4-3
     * @param response
     *
     *

    exportExcel () {
        // 置空
                const conditions = this.quetyConditions;
        for (const a in conditions) {
            if (typeof conditions[a] == 'undefined' || conditions[a] == null) {
                conditions[a] = '';
            }
        }
        let url = `/api/urger/exportExcel?urger.beginDate=${conditions.beginDate}&urger.endDate=${conditions.endDate}`
                + `&urger.subject=${conditions.subject}&urger.approveUserName=${conditions.approveUserName}`
                + `&urger.urgerType=${conditions.urgerType}&urger.docType=${conditions.docType}&urger.urgerProperty=${conditions.urgerProperty}`
                + `&urger.urgeStatus=${conditions.urgeStatus}&urger.origin=${conditions.origin}&urger.draftUserName=${conditions.draftUserName}`
                + `&exportFields=${this.mainDocCheckedOptions}`
                + `&x-auth-token=${this.$store.state.user.token}&paging.limit=1000000&paging.offset=0`;
        url = encodeURI(url);
        window.open(url);
    }
     * @return
     */
    @GetMapping("/urger/exportExcel")
    public void exportExcelController(UrgerExporExcel urgerExporExcel, HttpServletResponse response) throws Exception {
        SecurityUser securityUser = SecurityUtils.getPrincipal();

        Urger urger = urgerExporExcel.getUrger();
        if (urger != null){
            urger.setSystemNo(securityUser.getSystemNo());
        }
        //Page<Urger> urgerPage = this.urgerMng.getDetailDistributedUrger(urgerExporExcel.getPaging(),urgerExporExcel.getUrger(),urgerExporExcel.getWord());
        Page<UrgerVo> urgerPage = this.urgerMng.getAllUrgerList4Page(urgerExporExcel.getPaging(),urgerExporExcel.getUrger(),urgerExporExcel.getWord());
        if (urgerPage.getList() == null){
            throw new BusinessException("导出失败。导出数据为空");
        }
        for (Urger urger1 : urgerPage.getList()){
            Urger urger2 = this.urgerMng.getDetailUrgerById(urger1.getId());
            if(urger2 != null){
                urger1 = urger2;
            }
        }

        String subject = "登记表";
        String dateStr="";
        String date1="";
        String date2="今";
        SimpleDateFormat simpleDate=new SimpleDateFormat("yyyy年MM月dd日");
        if(urger.getBeginDate() != null){
            date1=simpleDate.format(urger.getBeginDate());
        }
        if(urger.getEndDate() != null){
            date2=simpleDate.format(urger.getEndDate());
        }
        dateStr=date1+"至"+date2;
        List<String> exportFields = urgerExporExcel.getExportFields();
        this.exportExcel(response,urgerPage.getList(),exportFields,subject,dateStr);
    }
    private void exportExcel(HttpServletResponse response, List<Object> data, List<String> exportFields, String subject, String dateStr) throws IOException {
        //生产excel
        HSSFWorkbook wb = this.geneExcel(data,exportFields,subject,dateStr);

        //输出excel
        OutputStream output=null ;
        try {
            response.setContentType("application/octet-stream");
            response.addHeader("Content-Disposition",
                    String.format("attachment;filename*=utf-8'zh_cn'%s", URLEncoder.encode(subject+".xls", "UTF-8")));
            output=response.getOutputStream();
            wb.write(output);
        } catch (Exception e) {
            e.printStackTrace();
        }finally {
            if(output!=null){
                output.flush();
                output.close();
            }
        }
    }
    private HSSFWorkbook geneExcel(List<Object> data, List<String> exportFields, String subject, String dateStr) {
        //创建HSSFWorkbook对象(excel的文档对象)
        HSSFWorkbook wb = new HSSFWorkbook();

        //-----------------标题--单元格样式--------------------
        HSSFCellStyle titleStyle = wb.createCellStyle();
        //水平垂直居中
        titleStyle.setAlignment(HorizontalAlignment.CENTER);
        titleStyle.setVerticalAlignment(VerticalAlignment.CENTER);
        //字体
        HSSFFont titleFont = wb.createFont();
        titleFont.setFontName("华文中宋");
        titleFont.setFontHeightInPoints((short) 12);
        titleFont.setBold(true);
        titleStyle.setFont(titleFont);

        //-----------------时间范围--单元格样式-----------------
        HSSFCellStyle dateStyle = wb.createCellStyle();
        dateStyle.setAlignment(HorizontalAlignment.CENTER);
        dateStyle.setVerticalAlignment(VerticalAlignment.CENTER);
        //字体
        HSSFFont dateFont = wb.createFont();
        dateFont.setFontName("仿宋_GB2312");
        dateFont.setFontHeightInPoints((short) 12);
        dateStyle.setFont(dateFont);

        //------------------字段--单元格样式-------------------
        HSSFCellStyle fieldStyle = wb.createCellStyle();
        fieldStyle.setAlignment(HorizontalAlignment.CENTER);
        fieldStyle.setVerticalAlignment(VerticalAlignment.CENTER);
        fieldStyle.setBorderBottom(BorderStyle.THIN);
        fieldStyle.setBottomBorderColor(IndexedColors.GREEN.getIndex());
        fieldStyle.setBorderLeft(BorderStyle.THIN);
        fieldStyle.setBorderTop(BorderStyle.THIN);
        fieldStyle.setBorderRight(BorderStyle.THIN);
        //字体
        HSSFFont fieldFont = wb.createFont();
        fieldFont.setFontName("黑体");
        fieldFont.setFontHeightInPoints((short) 11);
        fieldStyle.setFont(fieldFont);

        //------------------字段内容--单元格样式-------------------
        HSSFCellStyle contentStyle = wb.createCellStyle();
        contentStyle.setVerticalAlignment(VerticalAlignment.CENTER);
        contentStyle.setBorderBottom(BorderStyle.THIN);
        contentStyle.setBorderLeft(BorderStyle.THIN);
        contentStyle.setBorderRight(BorderStyle.THIN);
        //内容自动换行
        contentStyle.setWrapText(true);
        //字体
        HSSFFont contentFont = wb.createFont();
        contentFont.setFontName("仿宋_GB2312");
        contentFont.setFontHeightInPoints((short) 11);
        contentStyle.setFont(contentFont);

        //建立新的sheet对象
        HSSFSheet sheet=wb.createSheet(subject);
        //设置缺省行高\列宽
        sheet.setDefaultRowHeightInPoints(40);
        for (int i = 0; i < exportFields.size(); i++){
            ExportFields urgerExportFields = UrgerExportFields.valueOf(exportFields.get(i));
            sheet.setColumnWidth(i,  urgerExportFields.getExcelCellsWidth());
        }
//        sheet.setColumnWidth(0,  (int)((15 + 0.72) * 256));
//        sheet.setColumnWidth(1,  (int)((15 + 0.72) * 256));
//        sheet.setColumnWidth(2,  (int)((15 + 0.72) * 256));
//        sheet.setColumnWidth(3,  (int)((30 + 0.72) * 256));
//        sheet.setColumnWidth(4,  (int)((15 + 0.72) * 256));
//        sheet.setColumnWidth(5,  (int)((15 + 0.72) * 256));
//        sheet.setColumnWidth(6,  (int)((15 + 0.72) * 256));
//        sheet.setColumnWidth(7,  (int)((15 + 0.72) * 256));
//        sheet.setColumnWidth(8,  (int)((15 + 0.72) * 256));

        //-----------------------在sheet里创建第一行，参数为行索引(excel的行)，可以是0～65535之间的任何一个
        HSSFRow row1=sheet.createRow(0);
        row1.setHeightInPoints((float) 17.25);
        //创建单元格
        HSSFCell titleCell=row1.createCell(0);
        //标题单元格内容
        titleCell.setCellValue(subject);
        //合并单元格CellRangeAddress构造参数依次表示起始行，截至行，起始列， 截至列
        sheet.addMergedRegion(new CellRangeAddress(0,0,0,exportFields.size()-1));
        //配置单元格样式
        titleCell.setCellStyle(titleStyle);

        //------------------------第二行
        HSSFRow row2=sheet.createRow(1);
        row2.setHeightInPoints((float)14.25);
        HSSFCell dateCell=row2.createCell(0);
        dateCell.setCellValue(dateStr);
        sheet.addMergedRegion(new CellRangeAddress(1,1,0,exportFields.size()-1));
        //行设置样式
        dateCell.setCellStyle(dateStyle);

        //------------------------在sheet里创建第三行
        HSSFRow row3=sheet.createRow(2);
        row3.setHeightInPoints((float)19);
        //创建单元格并设置单元格内容
        for (int i = 0; i < exportFields.size(); i++){
            ExportFields urgerExportFields = UrgerExportFields.valueOf(exportFields.get(i));
            HSSFCell field1=row3.createCell(i);
            field1.setCellValue(urgerExportFields.getExportName());
            field1.setCellStyle(fieldStyle);
        }


        //在sheet里创建第四行后

        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

        this.geneExcelContent(data,exportFields,contentStyle,sheet);
//        for (int i = 0; i < data.size(); i++) {
//            UrgerVo urger = data.get(i);
//            dataRow=sheet.createRow(i+3);
//            for (int j = 0; j < exportFields.size(); j++){
//                UrgerExportFields urgerExportFields = UrgerExportFields.valueOf(exportFields.get(j));
//                urgerExportFields.setDocOpinionMng(docOpinionMng);
//                HSSFCell field1=dataRow.createCell(j);
//                field1.setCellValue(urgerExportFields.getExcelExportContentFromUrger(urger));
//                field1.setCellStyle(contentStyle);
//            }

////            JSONObject jsonObject = (JSONObject) JSON.toJSON(receival);
////            String keyValue = (String)jsonObject.get("");
//
//            HSSFCell content1=dataRow.createCell(0);
//            content1.setCellValue(formatter.format(receival.getDraftDate()));
//            content1.setCellStyle(contentStyle);
//
//            HSSFCell content2=dataRow.createCell(1);
//            content2.setCellValue(receival.getSourceUnit());
//            content2.setCellStyle(contentStyle);
//
//            HSSFCell content3=dataRow.createCell(2);
//            content3.setCellValue(receival.getDocMark());
//            content3.setCellStyle(contentStyle);
//
//            HSSFCell content4=dataRow.createCell(3);
//            content4.setCellValue(receival.getSubject());
//            content4.setCellStyle(contentStyle);
//
//            HSSFCell content5=dataRow.createCell(4);
//            content5.setCellValue(receival.getCommonJson().getString("nbyjUser"));
//            content5.setCellStyle(contentStyle);
//
//            HSSFCell content6=dataRow.createCell(5);
//            content6.setCellValue(receival.getCommonJson().getString("nbyjContent"));
//            content6.setCellStyle(contentStyle);
//
//            HSSFCell content7=dataRow.createCell(6);
//            String yldyjStr=receival.getCommonJson().getString("yndyj");
//            String value="";
//            if(StringUtils.isNotBlank(yldyjStr)){
//
//                JSONArray jsonArray=JSONArray.parseArray(yldyjStr);
//                for(int j=0;j<jsonArray.size();j++){
//                    JSONObject job = jsonArray.getJSONObject(j);
//                    value+=job.getString("content")+" --"+job.getString("user")+"\n";
//                }
//            }
//            content7.setCellValue(value);
//            content7.setCellStyle(contentStyle);
//
//            HSSFCell content8=dataRow.createCell(7);
//            content8.setCellValue(receival.getDraftUserDept());
//            content8.setCellStyle(contentStyle);
//
//            HSSFCell content9=dataRow.createCell(8);
//            content9.setCellValue(receival.getRemark());
//            content9.setCellStyle(contentStyle);
//
//        }

        return wb;
    }
    private void geneExcelContent(List<Object> data, List<String> exportFields, HSSFCellStyle contentStyle, HSSFSheet sheet){
        HSSFRow dataRow;
        for (int i = 0; i < data.size(); i++) {
            UrgerVo urger = (UrgerVo)data.get(i);
            dataRow=sheet.createRow(i+3);
            for (int j = 0; j < exportFields.size(); j++){
                UrgerExportFields urgerExportFields = UrgerExportFields.valueOf(exportFields.get(j));
                //urgerExportFields.setDocOpinionMng(docOpinionMng);
                HSSFCell field1=dataRow.createCell(j);
                field1.setCellValue(urgerExportFields.getExcelExportContentFromUrger(urger));
                field1.setCellStyle(contentStyle);
            }
        }
    }


}
